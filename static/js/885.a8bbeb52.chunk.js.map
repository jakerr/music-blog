{"version":3,"file":"static/js/885.a8bbeb52.chunk.js","mappings":"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","sources":["MajorModesTutorial.tsx"],"sourcesContent":["import { MajorMode, MajorModes, ModeBuilder } from \"./ModeHighlighters\";\nimport \"./App.css\";\nimport { KeyHighlighter } from \"./KeyHighlighter\";\nimport { SoundPlayerProvider } from \"./SoundPlayer\";\nimport { Keyboard } from \"./Keyboard\";\nimport { GlobalOptionsProvider } from \"./GlobalOptions\";\nimport { noteNamed } from \"./Notes\";\n// import { C0, D0, C3, CS0 } from \"./NoteMacros\";\n\nconst C0 = noteNamed(\"C0\");\nconst CS0 = noteNamed(\"C#0\");\nconst D0 = noteNamed(\"D0\");\nconst C3 = noteNamed(\"C3\");\n\nfunction ExplorerLink() {\n  return (\n    <a href=\"/music-blog/#/modes-explorer\" className=\"modes-thumb-link\">\n      <img src=\"/music-blog/explorer-thumb.png\" alt=\"Major Modes Explorer\" />\n    </a>\n  );\n}\n\nfunction Introduction() {\n  return (\n    <>\n      <p>\n        This is an interactive music theory tutorial that will introduce you to\n        a non-standard method of learning all of the major scales as well as the\n        major modes.\n      </p>\n      <p>\n        If you prefer to jump straight to a tool for exploring the major modes\n        without reading click here:\n        <ExplorerLink/>\n      </p>\n      <p>\n        I won't go into great detail about how the different modes sound or when\n        they are useful. There is a lot of great content out there on that\n        subject, that you can find by searching for \"music theory modes\". What I\n        want to focus on is a method for identifying and memorizig the notes in\n        each mode using the piano keyboard as a visual aide.\n        <br />\n        <br />\n        The method I'll introduce doesn't require the linear following of a\n        pattern that you may be used to: \"whole, whole, half, whole, whole,\n        whole, half\" (don't worry if you're not familiar, we will review it\n        below) and instead teaches you to see the scales as alternating groups\n        of differnt kinds of notes \"3 of one then 4 of another\".\n        <br />\n        <br /> What are these two kinds of notes? Well in interest of not\n        burying the lede I'm talking about the two whole tone scales and looking\n        at the construction of the major scales and modes as clusters of notes\n        from those two scales in alternate. If that isn't too clear, don't worry\n        it's all layed out in detail below!\n      </p>\n    </>\n  );\n}\n\nfunction TraditionalMethod() {\n  const builder = new ModeBuilder(C0)\n    .Ionian()\n    .ColorSingleFirst()\n    .BracketsWholeHalf()\n    .Animate();\n  const CMaj: KeyHighlighter[] = [builder.build()];\n  builder.Note(D0);\n  const DMaj: KeyHighlighter[] = [builder.build()];\n  return (\n    <>\n      <h2>Introduction and Background</h2>\n      <h3>The Traditional Major Scale Formula</h3>\n      <p>\n        Before we get to the non-standard approach let's review the more common\n        one. Traditionally we're taught to identify the notes in the major\n        scales by using a formula consisting of alternating whole and half\n        steps. The formula you may be familiar with is:\n        <br />\n        <br />\n        (Whole, Whole, Half, Whole, Whole, Whole, Half)\n        <br />\n        <br />\n        Or for short:\n        <br />\n        <br />\n        (w, w, h, w, w, w, h)\n        <br />\n        <br />\n        Starting at the root note anotated 'r' below, \"Whole (w)\" means to skip\n        a key on the keyboard, and \"Half (h)\" means to move to the key next to\n        the current one without skipping. Notice that that last 'h' in the\n        pattern brings us back to the root note an octave above and the pattern\n        repeats.\n        <br />\n        <br />\n        So starting on C we can make a C major scale like this:\n      </p>\n      <Keyboard\n        from={C0}\n        to={C3}\n        size=\"large\"\n        staticHighlighters={CMaj}\n        shouldAnimate={true}\n        scaleMode={\"Ionian\"}\n        scaleStart={C0}\n        namingConvention=\"easy\"\n        patternConvention=\"whole-half\"\n      ></Keyboard>\n      <p>\n        If we apply that same pattern but start on the next white key up from\n        'C' which is 'D' we get this pattern for the D major scale:\n      </p>\n      <Keyboard\n        from={C0}\n        to={C3}\n        size=\"large\"\n        staticHighlighters={DMaj}\n        shouldAnimate={true}\n        scaleMode={\"Ionian\"}\n        scaleStart={D0}\n        namingConvention=\"easy\"\n        patternConvention=\"whole-half\"\n      ></Keyboard>\n    </>\n  );\n}\n\nfunction WholeToneScales() {\n  const builder = new ModeBuilder(C0)\n    .WholeTone()\n    .ColorSingleFirst()\n    .BracketsScaleNumbers()\n    .Animate();\n  const CWhole: KeyHighlighter[] = [builder.build()];\n  builder.Note(CS0).ColorSingleSecond();\n  const CSWhole: KeyHighlighter[] = [builder.build()];\n  const specialCaseBg = new ModeBuilder(C0)\n    .AlternatingWholeTones()\n    .ColorDualLight()\n    .build();\n  specialCaseBg.opts.forceBG = true;\n  return (\n    <>\n      <h2>Detour - The Whole Tone Scales</h2>\n      <h3>... of which there are two.</h3>\n      <p>\n        We have one more stop before we can apply the non-standard approach to\n        building the major scales, that is, to become familiar with the whole\n        tone scales.\n        <br />\n        <br />\n        The whole tone scales are the scales you get when you start on a note\n        and jump whole steps all the way up the keyboard until the next octave.\n        You'll notice that whereever you start there are always 6 whole steps\n        before the pattern repeats. One fun thing about these scales is that\n        they might remind you of the \"dream sequence\" transition sound that you\n        hear in old movies and tv shows.\n        <br />\n        <br />\n        So starting on C we can make a whole tone scale like this:\n      </p>\n      <Keyboard\n        from={C0}\n        to={C3}\n        size=\"large\"\n        staticHighlighters={CWhole}\n        shouldAnimate={true}\n        scaleMode={\"Whole Tone\"}\n        scaleStart={C0}\n        namingConvention=\"easy\"\n        patternConvention=\"hide\"\n      ></Keyboard>\n      <p>\n        If we apply that same pattern but start on the next key up from 'C'\n        which is 'C#' we get this pattern for the C-sharp whole-tone scale:\n      </p>\n      <Keyboard\n        from={C0}\n        to={C3}\n        size=\"large\"\n        staticHighlighters={CSWhole}\n        shouldAnimate={true}\n        scaleMode={\"Whole Tone\"}\n        scaleStart={CS0}\n        namingConvention=\"easy\"\n        patternConvention=\"hide\"\n      ></Keyboard>\n      <p>\n        Notice how these two scales look quite similar but are somewhat like\n        mirror images of one another. Another interesting thing to notice is how\n        the white keys that surround a cluster of black keys belong to the\n        whole-tone scale of the\n        <strong> other</strong> cluster of black keys. For example: C, D and E\n        surround the cluster of two black keys (C# and D#) but they are in the\n        same whole tone scale as the three black key cluster (F#, G# and A#).\n        <br />\n        <br />\n        Going forward its going to be very useful to start thinking of these two\n        scales in a visual way and starting to become familiar with their shapes\n        and the relationship between which black keys and white keys belong to\n        the same whole tone scales. I recommend playing with the two diagrams\n        above until it starts making sense and becomes intuitive to you\n        visually.\n      </p>\n      <h3>... putting them togehter</h3>\n      <p>\n        Since these two whole-tone scales comprise every note on the keyboard\n        but have no overlap we can visualize the keyboard as if it were made of\n        these two scales zipped together.\n      </p>\n      <Keyboard\n        from={C0}\n        to={C3}\n        size=\"large\"\n        staticHighlighters={[specialCaseBg]}\n      />\n      <p>\n        In further sections the keyboard can be highlighted with this above\n        visual aide to remind you of the whole-tone scales by enabling the\n        \"HIGHLIGHT WHOLETONES\" option in the settings at the bottom right of the\n        screen. It will be off by default to reduce visual clutter and help us\n        train to start seeing the whole-tone scale as they relate to the \"blacks\n        and whites\".\n      </p>\n    </>\n  );\n}\n\nfunction MajorScalePattern() {\n  return (\n    <>\n      <h3>Major Scales</h3>\n      <p>\n        Now that we're familiar with the whole tone scales. Let's look at the C\n        major scale again (the scale that is all the white keys from C up to the\n        next octave). This time instead of counting (w, w, h, w, w, w, h) let's\n        just see where the notes of C major land on our established whole-tone\n        scales.\n        <br />\n        <br />\n        If we highlight the keyboard with the whole-tone scale on the keyboard\n        and then look at the C major scale we'll notice a pattern:\n      </p>\n      <Keyboard\n        from={C0}\n        to={C3}\n        scaleStart={noteNamed(\"C0\")}\n        scaleMode=\"Ionian\"\n        size=\"large\"\n        shouldAnimate={true}\n        namingConvention=\"easy\"\n      ></Keyboard>\n      <p>\n        As you can see above the C major scale is a pattern of 3 whole-tones\n        from one scale, and then 4 from the other.\n        <br />\n        I hope you'll agree that this much easier to rember than the traditional\n        (w, w, h, w, w, w, h) formula, and maybe more importantly, you can just\n        see the shape of the scale by really paying attention to that cluster of\n        3 next to a cluster of 4.\n        <br />\n        <br />\n        Let's try this pattern out starting on D as we did in the introduction\n        to see the D Major scale as 3 and 4 whole tone clusters.\n      </p>\n      <Keyboard\n        from={C0}\n        to={C3}\n        scaleStart={noteNamed(\"D0\")}\n        scaleMode=\"Ionian\"\n        size=\"large\"\n        shouldAnimate={true}\n        namingConvention=\"easy\"\n      ></Keyboard>\n      <p>\n        It can take some practice to really see those clusters of 3 and 4 but if\n        you play with the slider above and slowly reveal the keys as you imagine\n        jumping back and forth between those two whole tone scales, I believe it\n        will start to come together.\n        <br />\n        <br />\n        Now Let's look at all of the other major scales. You can build all of\n        them using this same pattern of 3 of one whole tone scale, and 4 of the\n        other. There's a new slider added below that lets you change the root\n        note so that you can see this 3-and-4 pattern applied to each root note\n        to give you all 12 major scales.\n      </p>\n      <Keyboard\n        from={C0}\n        to={C3}\n        scaleStart={noteNamed(\"C#0\")}\n        scaleMode=\"Ionian\"\n        size=\"large\"\n        canTranspose={true}\n        shouldAnimate={true}\n        namingConvention=\"easy\"\n      ></Keyboard>\n    </>\n  );\n}\n\nfunction MinorScalePattern() {\n  return (\n    <>\n      <h3>Minor Scales</h3>\n      <p>\n        Another scale you may have heard of is the minor scale. This is the\n        scale that you get when you start on A and use every white key up to the\n        next A.\n        <br />\n        <br />\n        Notice that when we start on A the whole-tones have a differnt pattern,\n        now it's [2, 3, 2]. Starting on A, the minor scale has all white keys,\n        but lets see what happens when you move this 2, 3, 2 pattern down to C\n        (use the slider to explore).\n      </p>\n      <Keyboard\n        from={C0}\n        to={C3}\n        scaleStart={noteNamed(\"A0\")}\n        scaleMode=\"Aeolian\"\n        size=\"large\"\n        canTranspose={true}\n        shouldAnimate={true}\n        namingConvention=\"easy\"\n      ></Keyboard>\n    </>\n  );\n}\n\nconst GenericModePattern: React.FC<{\n  modeName: MajorMode;\n  noteName: string;\n}> = ({ modeName, noteName }) => {\n  const pattern = MajorModes[modeName];\n  const patternString = pattern.join(\", \");\n  return (\n    <>\n      <h3>{modeName} Mode</h3>\n      <p>\n        {modeName} is the mode that you get when you start on {noteName} and use\n        every white key up to the next {noteName}.\n        <br />\n        <br />\n        Notice that when we start on {noteName} the whole-tones have a differnt\n        pattern from our other modes thus far. The {modeName} pattern is [\n        {patternString}]. Starting on {noteName}, the {modeName} mode has all\n        white keys, but lets see what happens when you move this {patternString}{\" \"}\n        pattern down to C (use the slider to explore).\n      </p>\n      <Keyboard\n        from={C0}\n        to={C3}\n        scaleStart={noteNamed(noteName)}\n        scaleMode={modeName}\n        size=\"large\"\n        shouldAnimate={true}\n        canTranspose={true}\n      ></Keyboard>\n    </>\n  );\n};\n\nfunction MajorModesTutorial() {\n  return (\n    <div className=\"App\">\n      <GlobalOptionsProvider>\n        <SoundPlayerProvider>\n          <header className=\"App-header\">\n            {/* <img src={logo} className=\"App-logo\" alt=\"logo\" /> */}\n            <h1>Whole Tone Scales to Major Modes</h1>\n            <Introduction />\n            <TraditionalMethod />\n            <WholeToneScales />\n            <h2>The Whole-Tone Cluster Method</h2>\n            <MajorScalePattern />\n            <MinorScalePattern />\n            <h3>Other Major Modes</h3>\n            I've used the word \"mode\" now a couple of times but haven't defined\n            it. A mode put simpily is a scale that is built by starting on any\n            white key and including all the white keys up to the next octave.\n            <br />\n            <br />\n            Above we've already constructed two of the modes the Major mode\n            starting on C and the minor mode starting on A. These are just two\n            of seven possible modes (since we have 7 white keys). Each of these\n            modes have a different pattern of whole-tone clusters that we can\n            memorize, and they each also have a distict sound.\n            <br />\n            <br />\n            The seven modes are:\n            <ol>\n              <li>Ionian starting on C (also called Major)</li>\n              <li>Dorian starting on D</li>\n              <li>Phrygian starting on E</li>\n              <li>Lydian starting on F</li>\n              <li>Mixolydian starting on G</li>\n              <li>Aeolean starting on A (also called Minor)</li>\n              <li>Locrian starting on B</li>\n            </ol>\n            Since we already coverd the first and sixth modes let's look at the\n            remaining 5 below.\n            <br />\n            <br />\n            In each of the remaining modes we'll start the visualization on the\n            root note such that all of the keys are white and count the\n            whole-tone clusters to see how we can transpose this mode to other\n            keys.\n            <GenericModePattern modeName=\"Dorian\" noteName=\"D\" />\n            <GenericModePattern modeName=\"Phrygian\" noteName=\"E\" />\n            <GenericModePattern modeName=\"Lydian\" noteName=\"F\" />\n            <GenericModePattern modeName=\"Mixolydian\" noteName=\"G\" />\n            <GenericModePattern modeName=\"Locrian\" noteName=\"B\" />\n            <h2>What's next?</h2>\n            <p>\n              If you've made it this far, thanks for reading! You can practice\n              what you've learned and explore all of the major modes in the\n              Major Modes Explorer below.\n              <ExplorerLink/>\n            </p>\n          </header>\n        </SoundPlayerProvider>\n      </GlobalOptionsProvider>\n    </div>\n  );\n}\n\nexport default MajorModesTutorial;\n"],"names":["C0","noteNamed","CS0","D0","C3","ExplorerLink","href","className","src","alt","Introduction","TraditionalMethod","builder","ModeBuilder","Ionian","ColorSingleFirst","BracketsWholeHalf","Animate","CMaj","build","Note","DMaj","from","to","size","staticHighlighters","shouldAnimate","scaleMode","scaleStart","namingConvention","patternConvention","WholeToneScales","WholeTone","BracketsScaleNumbers","CWhole","ColorSingleSecond","CSWhole","specialCaseBg","AlternatingWholeTones","ColorDualLight","opts","forceBG","MajorScalePattern","canTranspose","MinorScalePattern","GenericModePattern","modeName","noteName","patternString","MajorModes","join"],"sourceRoot":""}